<script>

function handleReviewScript() {
    reviewsArray = addReviews();
    
    var productSchemaScript = findProductSchemaScript();
    var schemaData = JSON.parse(productSchemaScript.textContent);
    schemaData.review = reviewsArray;

    //var AggregateRating = findAggregateReviewsSchemaScript();
    //AggregateRatingJSON = JSON.parse(AggregateRating.textContent);
    var reviewsContent = document.querySelector('.reviews-num').textContent;
    var matches = reviewsContent.match(/\d+/);
    //var numberValue = matches ? parseInt(matches[0]) : null;

    schemaData.aggregateRating = [{
        "@type": "AggregateRating",
        "ratingValue": document.querySelector('.big-point').textContent,
        "bestRating": "5",
        "worstRating": "1",
        "ratingCount": matches[0]
    }];
    
    productSchemaScript.textContent = JSON.stringify(schemaData, null, 2);
    //console.log(productSchemaScript.outerHTML);
    //AggregateRating.remove();
    
}

function addReviews(names, descriptions, ratings){
    var reviewsArray = [];
    for(i = 0; i < names.length; i++){
        var name = names[i];
        var description = descriptions[i];
        var starRating = ratings[i];

        reviewsArray.push({
            "@type": "Review",
            "name": name,
            "reviewBody": description,
            "author": {
                "@type": "Person",
                "name": name
            },
            "name": name,
            "datePublished": "2024-01-08",
            "reviewRating": {
                "@type": "Rating",
                "ratingValue": starRating
            },
            "publisher": {
                "@type": "Organization",
                "name": "Shopify Product Reviews"
            }
        });
        
    }
    return reviewsArray;
}



</script>

<script>
//main function to start adding names and descriptions to schema
function addReviewsToSchema(names, descriptions, ratings){
    //var reviewsArray = addReviews(names, descriptions, ratings);
    var productSchemaScript = findProductSchemaScript();
    var schemaData = JSON.parse(productSchemaScript.textContent);
    //console.log(schemaData);

}

function findProductSchemaScript() {
    var scriptElements = document.querySelectorAll('script[type="application/ld+json"]');
    return scriptElements[0];
}

function getMaxToFind(){
    return parseInt(document.querySelector('.reviews-num').textContent);
}

function waitForElementToExist(identifier, isClass, count, callback, interval = 500) {
    const checkElement = () => {
        const targetNode = isClass ? document.querySelectorAll('.' + identifier)[count] : document.getElementById(identifier);
        if (targetNode && targetNode.innerHTML.trim() !== '') {
            callback(targetNode);
        } else{
            console.log("doesnt exist yet");
            setTimeout(checkElement, interval);
        }
    };
    checkElement();
}

function setUpObserverForElement(identifier, isClass, count, callback) {
    let targetNode;
    if (isClass) {
        const elements = document.querySelectorAll('.' + identifier);
        if (elements.length > count) {
            targetNode = elements[count];
            if (targetNode.innerHTML.trim() !== '') {
                callback();
                return true;
            }
        } else {
            console.error('Element not found.');
            return false;
        }
    } else {
        targetNode = document.getElementById(identifier);
        if (!targetNode) {
            console.error('Element not found.');
            return false;
        }
    }

    const observer = new MutationObserver(() => {
        //console.log('Mutation observed:');
        observer.disconnect();
        callback();
        return true;
    });

    observer.observe(targetNode, { attributes: true, childList: true, subtree: true });
    return observer;
}

function getStarRating(element){
    var reviewDiv = document.getElementsByClassName('vstar-star')[element];
    console.log(reviewDiv.querySelector('.nostar'));
}


function initiation() {
    var countFound = 0;
    var names = [];
    var descriptions = [];
    var ratings = [];
    waitForElementToExist('reviews-num', true, 0, function(targetNode) {
        setUpObserverForElement('reviews-num', true, 0, function() {
            var maxToFind = getMaxToFind();
            fetchFiveReviews(maxToFind, names, descriptions, ratings);
        });
    });
}

function fetchFiveReviews(maxToFind, names, descriptions, ratings){
    //5 as thats the amount shown per pagnate.
    var maxReviews = 2;
    for (let i = 0; i < maxReviews; i++) {
        setUpObserverForElement('author-name', true, i, function(count) {
            return function() {
                ratings[ratings.length] = getStarRating(i);
                names[names.length] = document.querySelectorAll('.author-name')[count].innerHTML;
                setUpObserverForElement('reviews-text', true, i, function(count) {
                    return function() {
                        descriptions[descriptions.length] = document.querySelectorAll('.reviews-text')[count].innerHTML;
                        console.log(names);
                        console.log(descriptions);
                        console.log(reviews);
                        if(i == 4 && names.length < maxToFind){
                            setUpObserverForElement('reviews-body', false, i, function(count) {
                                return function() {
                                    fetchFiveReviews(maxToFind, names, descriptions, ratings);
                                }
                            }(i));
                            document.querySelector('.next-page').click();
                        }
                        else if(i == maxReviews-1 && names.length >= maxToFind){
                            addReviewsToSchema(names, descriptions, ratings);
                        }
                    };
                }(i));
            };
        }(i));
    }
}

window.addEventListener("load", function() {
    //initiation();
});





</script>