<script>

function findProductSchemaScript() {
    var scriptElements = document.querySelectorAll('script[type="application/ld+json"]');
    return scriptElements[0];
}
/*
function findAggregateReviewsSchemaScript() {
    var scriptElements = document.querySelectorAll('script[type="application/ld+json"]');
    return scriptElements[scriptElements.length-1];
}*/

function handleReviewScript() {
    reviewsArray = addReviews();
    console.log(reviewsArray);
    var productSchemaScript = findProductSchemaScript();
    var schemaData = JSON.parse(productSchemaScript.textContent);
    schemaData.review = reviewsArray;
    console.log(schemaData);
    //var AggregateRating = findAggregateReviewsSchemaScript();
    //AggregateRatingJSON = JSON.parse(AggregateRating.textContent);
    var reviewsContent = document.querySelector('.reviews-num').textContent;
    var matches = reviewsContent.match(/\d+/);
    //var numberValue = matches ? parseInt(matches[0]) : null;

    schemaData.aggregateRating = [{
        "@type": "AggregateRating",
        "ratingValue": document.querySelector('.big-point').textContent,
        "bestRating": "5",
        "worstRating": "1",
        "ratingCount": matches[0]
    }];
    
    productSchemaScript.textContent = JSON.stringify(schemaData, null, 2);
    console.log(productSchemaScript);
    //AggregateRating.remove();
    
}

function addReviews(){
    var reviewsArray = [];
    var reviews = Array.from(document.getElementsByClassName('list-review'));
    for(i = 0; i < reviews.length; i++){
        //var reviewTitle = reviews[i].querySelector('.spr-review-header-title').innerHTML;
        var name = reviews[i].querySelector('.author-name').innerHTML;
        //var date =  reviews[i].querySelector('.spr-review-header-byline').querySelectorAll('strong')[1].innerHTML;
        
        /*var inputDate = new Date(date);
        var year = inputDate.getFullYear();
        var month = inputDate.getMonth() + 1; // Note: Months are zero-indexed
        var day = inputDate.getDate();
        var formattedDate = year + "-" + (month < 10 ? "0" : "") + month + "-" + (day < 10 ? "0" : "") + day;
        */
        
        var description = reviews[i].querySelector('.reviews-text').innerHTML;
        console.log(description);
        var starRating = parseInt(document.getElementsByClassName('big-point')[0].innerHTML);

        reviewsArray.push({
            "@type": "Review",
            "name": name,
            "reviewBody": description,
            "author": {
                "@type": "Person",
                "name": name
            },
            "name": name,
            "datePublished": "2024-01-08",
            "reviewRating": {
                "@type": "Rating",
                "ratingValue": starRating
            },
            "publisher": {
                "@type": "Organization",
                "name": "Shopify Product Reviews"
            }
        });
        
    }
    return reviewsArray;
}





function waitForAuthorNameLoaded(callback) {
  // Target the reviews-wrapper element
  var reviewsWrapper = document.getElementById('reviews-wrapper');
  
  // Check if the reviews-wrapper element exists
  if (reviewsWrapper) {
    // Create a new MutationObserver
    var observer = new MutationObserver(function(mutations) {
      // Loop through the mutations
      mutations.forEach(function(mutation) {
        // Check if any nodes were added
        if (mutation.addedNodes.length > 0) {
          // Loop through the added nodes
          mutation.addedNodes.forEach(function(node) {
            // Check if the node contains the author name
            if (node.querySelector('.author-name')) {
              // If the author name is found, disconnect the observer
              observer.disconnect();
              // Call the callback function
              callback();
            }
          });
        }
      });
    });

    // Start observing changes to the DOM within the reviews-wrapper element
    observer.observe(reviewsWrapper, { childList: true, subtree: true });
  }
}

// Usage example
waitForAuthorNameLoaded(function() {
    handleReviewScript();
});





</script>